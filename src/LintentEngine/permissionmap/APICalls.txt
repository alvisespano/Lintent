android.accessibilityservice.AccessibilityService.clearWallpaper()	android.permission.SET_WALLPAPER			
android.accessibilityservice.AccessibilityService.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	An additional permission check depends on the Intent; see the Intent permissions section.		
android.accessibilityservice.AccessibilityService.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	An additional permission check depends on the Intent; see the Intent permissions section.		
android.accessibilityservice.AccessibilityService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY	An additional permission check depends on the Intent; see the Intent permissions section.		
android.accessibilityservice.AccessibilityService.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.accessibilityservice.AccessibilityService.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.accounts.AbstractAccountAuthenticator.checkBinderPermission()	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[Ljava.lang.String;)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[Ljava.lang.String;,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[Ljava.lang.String;)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator$Transport.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AbstractAccountAuthenticator.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[Ljava.lang.String;,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.AccountAuthenticatorActivity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.accounts.AccountAuthenticatorActivity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.accounts.AccountAuthenticatorActivity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.accounts.AccountAuthenticatorActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.accounts.AccountAuthenticatorActivity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.accounts.AccountAuthenticatorActivity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.accounts.AccountAuthenticatorActivity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.accounts.AccountManager.addAccount(java.lang.String,java.lang.String,[Ljava.lang.String;,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager.addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManager.blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)	android.permission.USE_CREDENTIALS			
android.accounts.AccountManager.clearPassword(android.accounts.Account)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager.confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager.editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager.getAccounts()	android.permission.GET_ACCOUNTS			
android.accounts.AccountManager.getAccountsByType(java.lang.String)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,[Ljava.lang.String;,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManager.getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.USE_CREDENTIALS			
android.accounts.AccountManager.getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.USE_CREDENTIALS			
android.accounts.AccountManager.getAuthTokenByFeatures(java.lang.String,java.lang.String,[Ljava.lang.String;,android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManager.getPassword(android.accounts.Account)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.getUserData(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.hasFeatures(android.accounts.Account,[Ljava.lang.String;,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManager.invalidateAuthToken(java.lang.String,java.lang.String)	android.permission.MANAGE_ACCOUNTS or android.permission.USE_CREDENTIALS			
android.accounts.AccountManager.peekAuthToken(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.setPassword(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.setUserData(android.accounts.Account,java.lang.String,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManager.updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager$AmsTask.doWork()	android.permission.GET_ACCOUNTS and android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager$AmsTask.start()	android.permission.GET_ACCOUNTS and android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.doWork()	android.permission.GET_ACCOUNTS and android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.start()	android.permission.GET_ACCOUNTS and android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[Ljava.lang.String;,boolean,android.os.Bundle)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.checkAuthenticateAccountsPermission(android.accounts.Account)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.checkManageAccountsOrUseCredentialsPermissions()	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.checkManageAccountsPermission()	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.checkReadAccountsPermission()	android.permission.GET_ACCOUNTS			
android.accounts.AccountManagerService.clearPassword(android.accounts.Account)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.getAccounts(java.lang.String)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManagerService.getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[Ljava.lang.String;)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManagerService.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)	android.permission.USE_CREDENTIALS			
android.accounts.AccountManagerService.getPassword(android.accounts.Account)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.getUserData(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[Ljava.lang.String;)	android.permission.GET_ACCOUNTS			
android.accounts.AccountManagerService.invalidateAuthToken(java.lang.String,java.lang.String)	android.permission.MANAGE_ACCOUNTS or android.permission.USE_CREDENTIALS			
android.accounts.AccountManagerService.peekAuthToken(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.setPassword(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.setUserData(android.accounts.Account,java.lang.String,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.AccountManagerService.updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)	android.permission.MANAGE_ACCOUNTS			
android.accounts.AccountManagerService$SimWatcher.onReceive(android.content.Context,android.content.Intent)	android.permission.READ_PHONE_STATE			
android.accounts.GrantCredentialsPermissionActivity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.accounts.GrantCredentialsPermissionActivity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.accounts.GrantCredentialsPermissionActivity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.accounts.GrantCredentialsPermissionActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.accounts.GrantCredentialsPermissionActivity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.accounts.GrantCredentialsPermissionActivity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.accounts.GrantCredentialsPermissionActivity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.accounts.IAccountAuthenticator$Stub$Proxy.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[Ljava.lang.String;,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[Ljava.lang.String;)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountAuthenticator$Stub$Proxy.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.ACCOUNT_MANAGER			
android.accounts.IAccountManager$Stub$Proxy.addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[Ljava.lang.String;,boolean,android.os.Bundle)	android.permission.MANAGE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.clearPassword(android.accounts.Account)	android.permission.MANAGE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)	android.permission.MANAGE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)	android.permission.MANAGE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.getAccounts(java.lang.String)	android.permission.GET_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[Ljava.lang.String;)	android.permission.GET_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)	android.permission.USE_CREDENTIALS			
android.accounts.IAccountManager$Stub$Proxy.getPassword(android.accounts.Account)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.getUserData(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[Ljava.lang.String;)	android.permission.GET_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.invalidateAuthToken(java.lang.String,java.lang.String)	android.permission.MANAGE_ACCOUNTS or android.permission.USE_CREDENTIALS			
android.accounts.IAccountManager$Stub$Proxy.peekAuthToken(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)	android.permission.MANAGE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.setPassword(android.accounts.Account,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.setUserData(android.accounts.Account,java.lang.String,java.lang.String)	android.permission.AUTHENTICATE_ACCOUNTS			
android.accounts.IAccountManager$Stub$Proxy.updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)	android.permission.MANAGE_ACCOUNTS			
android.app.Activity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.Activity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.Activity.sendBroadcast(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Activity.sendOrderedBroadcast(android.content.Intent,java.lang.String)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Activity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.Activity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.Activity.setContentView(int)	android.permission.INTERNET or NONE	The INTERNET permission is required when setting a content view with a WebView.		
android.app.Activity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.Activity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.Activity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.Activity.startActivity(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Activity.startActivityForResult(android.content.Intent,int)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Activity.startActivityFromChild(android.app.Activity,android.content.Intent,int)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Activity.startActivityIfNeeded(android.content.Intent,int)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.ActivityGroup.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.ActivityGroup.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.ActivityGroup.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.ActivityGroup.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.ActivityGroup.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.ActivityGroup.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.ActivityGroup.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.app.ActivityManager.forceStopPackage(java.lang.String)	android.permission.FORCE_STOP_PACKAGES			
android.app.ActivityManager.getRecentTasks(int,int)	android.permission.GET_TASKS			
android.app.ActivityManager.getRunningTasks(int)	android.permission.GET_TASKS			
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)	android.permission.RESTART_PACKAGES or android.permission.KILL_BACKGROUND_PROCESSES			
android.app.ActivityManager.restartPackage(java.lang.String)	android.permission.RESTART_PACKAGES or android.permission.KILL_BACKGROUND_PROCESSES			
android.app.ActivityManagerNative.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.app.ActivityManagerNative.forceStopPackage(java.lang.String)	android.permission.FORCE_STOP_PACKAGES			
android.app.ActivityManagerNative.getRecentTasks(int,int)	android.permission.GET_TASKS			
android.app.ActivityManagerNative.getRunningTasks(int)	android.permission.GET_TASKS			
android.app.ActivityManagerNative.killBackgroundProcesses(java.lang.String)	android.permission.RESTART_PACKAGES or android.permission.KILL_BACKGROUND_PROCESSES			
android.app.ActivityManagerNative.restartPackage(java.lang.String)	android.permission.RESTART_PACKAGES or android.permission.KILL_BACKGROUND_PROCESSES			
android.app.admin.DevicePolicyManager.getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.DevicePolicyManager.reportFailedPasswordAttempt()	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.DevicePolicyManager.reportSuccessfulPasswordAttempt()	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.DevicePolicyManager.setActiveAdmin(android.content.ComponentName)	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.DevicePolicyManager.setActivePasswordState(int,int)	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.IDevicePolicyManager$Stub$Proxy.getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.IDevicePolicyManager$Stub$Proxy.reportFailedPasswordAttempt()	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.IDevicePolicyManager$Stub$Proxy.reportSuccessfulPasswordAttempt()	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.IDevicePolicyManager$Stub$Proxy.setActiveAdmin(android.content.ComponentName)	android.permission.BIND_DEVICE_ADMIN			
android.app.admin.IDevicePolicyManager$Stub$Proxy.setActivePasswordState(int,int)	android.permission.BIND_DEVICE_ADMIN			
android.app.AlarmManager.setTime(long)	android.permission.SET_TIME			
android.app.AlarmManager.setTimeZone(java.lang.String)	android.permission.SET_TIME_ZONE			
android.app.AliasActivity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.AliasActivity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.AliasActivity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.AliasActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.AliasActivity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.AliasActivity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.AliasActivity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.Application.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.Application.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.app.Application.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.app.Application.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.Application.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.Application.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.Application.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.backup.BackupAgent.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.backup.BackupAgent.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.app.backup.BackupAgent.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.app.backup.BackupAgent.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.backup.BackupAgent.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.backup.BackupAgent.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.backup.BackupAgentHelper.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.backup.BackupAgentHelper.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.backup.BackupAgentHelper.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.backup.BackupAgentHelper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.backup.BackupAgentHelper.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.backup.BackupAgentHelper.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.backup.BackupManager.beginRestoreSession()	android.permission.BACKUP			
android.app.backup.BackupManager.dataChanged(java.lang.String)	android.permission.BACKUP or NONE	Without the BACKUP permission, the argument must be your own package.  With the BACKUP permission, the argument can be other packages.		
android.app.backup.BackupManager.requestRestore(android.app.backup.RestoreObserver)	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.backupNow()	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.beginRestoreSession(java.lang.String)	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.clearBackupData(java.lang.String)	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.dataChanged(java.lang.String)	android.permission.BACKUP or NONE	Without the BACKUP permission, the argument must be your own package.  With the BACKUP permission, the argument can be other packages.		
android.app.backup.IBackupManager$Stub$Proxy.getCurrentTransport()	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.isBackupEnabled()	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.listAllTransports()	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.selectBackupTransport(java.lang.String)	android.permission.BACKUP			
android.app.backup.IBackupManager$Stub$Proxy.setAutoRestore(boolean)	android.permission.BACKUP AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS			
android.app.backup.IBackupManager$Stub$Proxy.setBackupEnabled(boolean)	android.permission.BACKUP AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS			
android.app.ContextImpl.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.ContextImpl.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.app.ContextImpl.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.app.ContextImpl.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.ContextImpl.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.ContextImpl.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.ContextImpl$ApplicationContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)	android.permission.WRITE_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.getCurrentSync()	android.permission.READ_SYNC_STATS			
android.app.ContextImpl$ApplicationContentResolver.getIsSyncable(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.getMasterSyncAutomatically()	android.permission.READ_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.getPeriodicSyncs(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.getSyncAutomatically(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.getSyncStatus(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.app.ContextImpl$ApplicationContentResolver.isSyncActive(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.app.ContextImpl$ApplicationContentResolver.isSyncPending(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.app.ContextImpl$ApplicationContentResolver.openFileDescriptor(android.net.Uri,java.lang.String)	android.permission.READ_CONTACTS			
android.app.ContextImpl$ApplicationContentResolver.openInputStream(android.net.Uri)	android.permission.READ_CONTACTS			
android.app.ContextImpl$ApplicationContentResolver.openOutputStream(android.net.Uri)	android.permission.READ_CONTACTS			
android.app.ContextImpl$ApplicationContentResolver.query(android.net.Uri,[Ljava.lang.String;,java.lang.String,[Ljava.lang.String;,java.lang.String)	android.permission.READ_CONTACTS			
android.app.ContextImpl$ApplicationContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.WRITE_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,int)	android.permission.WRITE_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.setMasterSyncAutomatically(boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.app.ContextImpl$ApplicationPackageManager.addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.app.ContextImpl$ApplicationPackageManager.clearApplicationUserData(String,IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.app.ContextImpl$ApplicationPackageManager.clearPackagePreferredActivities(String)	android.permission.SET_PREFERRED_APPLICATIONS			
android.app.ContextImpl$ApplicationPackageManager.deleteApplicationCacheFiles(String,IPackageDataObserver)	android.permission.DELETE_CACHE_FILES			
android.app.ContextImpl$ApplicationPackageManager.deletePackage(String,IPackageDeleteObserver,int)	android.permission.DELETE_PACKAGES			
android.app.ContextImpl$ApplicationPackageManager.freeStorage(long,IntentSender)	android.permission.CLEAR_APP_CACHE			
android.app.ContextImpl$ApplicationPackageManager.freeStorageAndNotify(long,IPackageDataObserver)	android.permission.CLEAR_APP_CACHE			
android.app.ContextImpl$ApplicationPackageManager.getPackageSizeInfo(String,IPackageStatsObserver)	android.permission.GET_PACKAGE_SIZE			
android.app.ContextImpl$ApplicationPackageManager.installPackage(Uri,IPackageInstallObserver,int,String)	android.permission.INSTALL_PACKAGES			
android.app.ContextImpl$ApplicationPackageManager.movePackage(String,IPackageMoveObserver,int)	android.permission.MOVE_PACKAGE			
android.app.ContextImpl$ApplicationPackageManager.replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.app.ContextImpl$ApplicationPackageManager.setApplicationEnabledSetting(String,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.app.ContextImpl$ApplicationPackageManager.setComponentEnabledSetting(ComponentName,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.app.ExpandableListActivity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.ExpandableListActivity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.ExpandableListActivity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.ExpandableListActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.ExpandableListActivity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.ExpandableListActivity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.ExpandableListActivity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.FullBackupAgent.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.FullBackupAgent.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.FullBackupAgent.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.FullBackupAgent.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.FullBackupAgent.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.FullBackupAgent.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.IActivityManager$Stub$Proxy.bindBackupAgent(android.content.pm.ApplicationInfo,int)	android.permission.BACKUP			
android.app.IActivityManager$Stub$Proxy.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.app.IActivityManager$Stub$Proxy.forceStopPackage(java.lang.String)	android.permission.FORCE_STOP_PACKAGES			
android.app.IActivityManager$Stub$Proxy.getRecentTasks(int,int)	android.permission.GET_TASKS			
android.app.IActivityManager$Stub$Proxy.getTasks(int,int,android.app.IThumbnailReceiver)	android.permission.GET_TASKS			
android.app.IActivityManager$Stub$Proxy.killBackgroundProcesses(java.lang.String)	android.permission.KILL_BACKGROUND_PROCESSES or android.permission.RESTART_PACKAGES			
android.app.IActivityManager$Stub$Proxy.moveTaskBackwards(int)	android.permission.REORDER_TASKS			
android.app.IActivityManager$Stub$Proxy.moveTaskToBack(int)	android.permission.REORDER_TASKS			
android.app.IActivityManager$Stub$Proxy.moveTaskToFront(int)	android.permission.REORDER_TASKS			
android.app.IActivityManager$Stub$Proxy.profileControl(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor)	android.permission.SET_ACTIVITY_WATCHER			
android.app.IActivityManager$Stub$Proxy.resumeAppSwitches()	android.permission.STOP_APP_SWITCHES			
android.app.IActivityManager$Stub$Proxy.setActivityController(android.app.IActivityController)	android.permission.SET_ACTIVITY_WATCHER			
android.app.IActivityManager$Stub$Proxy.setAlwaysFinish(boolean)	android.permission.SET_ALWAYS_FINISH			
android.app.IActivityManager$Stub$Proxy.setDebugApp(java.lang.String,boolean,boolean)	android.permission.SET_DEBUG_APP			
android.app.IActivityManager$Stub$Proxy.setPersistent(android.os.IBinder,boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.IActivityManager$Stub$Proxy.setProcessForeground(android.os.IBinder,int,boolean)	android.permission.SET_PROCESS_LIMIT			
android.app.IActivityManager$Stub$Proxy.setProcessLimit(int)	android.permission.SET_PROCESS_LIMIT			
android.app.IActivityManager$Stub$Proxy.shutdown(int)	android.permission.SHUTDOWN			
android.app.IActivityManager$Stub$Proxy.signalPersistentProcesses(int)	android.permission.SIGNAL_PERSISTENT_PROCESSES			
android.app.IActivityManager$Stub$Proxy.stopAppSwitches()	android.permission.STOP_APP_SWITCHES			
android.app.IActivityManager$Stub$Proxy.unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.IActivityManager$Stub$Proxy.unhandledBack(int)	android.permission.FORCE_BACK			
android.app.IActivityManager$Stub$Proxy.updateConfiguration(android.content.res.Configuration)	android.permission.CHANGE_CONFIGURATION			
android.app.IAlarmManager$Stub$Proxy.setTime(long)	android.permission.SET_TIME			
android.app.IAlarmManager$Stub$Proxy.setTimeZone(java.lang.String)	android.permission.SET_TIME_ZONE			
android.app.Instrumentation.invokeContextMenuAction(android.app.Activity,int,int)	android.permission.INJECT_EVENTS			
android.app.Instrumentation.sendCharacterSync(int)	android.permission.INJECT_EVENTS			
android.app.Instrumentation.sendKeyDownUpSync(int)	android.permission.INJECT_EVENTS			
android.app.Instrumentation.sendKeySync(android.view.KeyEvent)	android.permission.INJECT_EVENTS
android.app.Instrumentation.sendPointerSync(android.view.MotionEvent)	android.permission.INJECT_EVENTS			
android.app.Instrumentation.sendStringSync(java.lang.String)	android.permission.INJECT_EVENTS
android.app.Instrumentation.sendTrackballEventSync(android.view.MotionEvent)	android.permission.INJECT_EVENTS			
android.app.IntentService.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.IntentService.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	An additional permission check depends on the Intent; see the Intent permissions section.		
android.app.IntentService.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	An additional permission check depends on the Intent; see the Intent permissions section.		
android.app.IntentService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.IntentService.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.IntentService.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.IStatusBar$Stub$Proxy.activate()	android.permission.EXPAND_STATUS_BAR			
android.app.IStatusBar$Stub$Proxy.addIcon(java.lang.String,java.lang.String,int,int)	android.permission.STATUS_BAR			
android.app.IStatusBar$Stub$Proxy.deactivate()	android.permission.EXPAND_STATUS_BAR			
android.app.IStatusBar$Stub$Proxy.disable(int,android.os.IBinder,java.lang.String)	android.permission.STATUS_BAR			
android.app.IStatusBar$Stub$Proxy.removeIcon(android.os.IBinder)	android.permission.STATUS_BAR			
android.app.IStatusBar$Stub$Proxy.toggle()	android.permission.EXPAND_STATUS_BAR			
android.app.IStatusBar$Stub$Proxy.updateIcon(android.os.IBinder,java.lang.String,java.lang.String,int,int)	android.permission.STATUS_BAR			
android.app.IWallpaperManager$Stub$Proxy.setDimensionHints(int,int)	android.permission.SET_WALLPAPER_HINTS			
android.app.IWallpaperManager$Stub$Proxy.setWallpaper(java.lang.String)	android.permission.SET_WALLPAPER			
android.app.IWallpaperManager$Stub$Proxy.setWallpaperComponent(android.content.ComponentName)	android.permission.SET_WALLPAPER_COMPONENT			
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)	android.permission.DISABLE_KEYGUARD			
android.app.KeyguardManager$KeyguardLock.disableKeyguard()	android.permission.DISABLE_KEYGUARD			
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()	android.permission.DISABLE_KEYGUARD			
android.app.ListActivity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.ListActivity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.ListActivity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.ListActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.ListActivity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.ListActivity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.ListActivity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.NotificationManager.notify(int,android.app.Notification)	android.permission.VIBRATE or NONE	Permission only required if you've set the Notification.vibrate field for the Notification parameter.		
android.app.NotificationManager.notify(java.lang.String,int,android.app.Notification)	android.permission.VIBRATE or NONE	Permission only required if you've set the Notification.vibrate field for the Notification parameter.		
android.app.Service.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.Service.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.Service.sendBroadcast(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Service.sendOrderedBroadcast(android.content.Intent,java.lang.String)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Service.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.Service.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.Service.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.Service.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.Service.startActivity(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.Service.startService(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.app.StatusBarManager.addIcon(java.lang.String,int,int)	android.permission.STATUS_BAR			
android.app.StatusBarManager.collapse()	android.permission.EXPAND_STATUS_BAR			
android.app.StatusBarManager.disable(int)	android.permission.STATUS_BAR			
android.app.StatusBarManager.expand()	android.permission.EXPAND_STATUS_BAR			
android.app.StatusBarManager.removeIcon(android.os.IBinder)	android.permission.STATUS_BAR			
android.app.StatusBarManager.toggle()	android.permission.EXPAND_STATUS_BAR			
android.app.StatusBarManager.updateIcon(android.os.IBinder,java.lang.String,int,int)	android.permission.STATUS_BAR			
android.app.TabActivity.clearWallpaper()	android.permission.SET_WALLPAPER			
android.app.TabActivity.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.TabActivity.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.app.TabActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.app.TabActivity.setPersistent(boolean)	android.permission.PERSISTENT_ACTIVITY			
android.app.TabActivity.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.TabActivity.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.WallpaperManager.clear()	android.permission.SET_WALLPAPER			
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.app.WallpaperManager.setResource(int)	android.permission.SET_WALLPAPER			
android.app.WallpaperManager.setStream(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.app.WallpaperManager.suggestDesiredDimensions(int,int)	android.permission.SET_WALLPAPER_HINTS			
android.appwidget.AppWidgetManager.bindAppWidgetId(int,android.content.ComponentName)	android.permission.BIND_APPWIDGET			
android.bluetooth.BluetoothA2dp.connectSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.disconnectSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.getConnectedSinks()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.getNonDisconnectedSinks()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.getSinkPriority(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.getSinkState(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.isSinkConnected(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothA2dp.resumeSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothA2dp.setSinkPriority(android.bluetooth.BluetoothDevice,int)	android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS			
android.bluetooth.BluetoothA2dp.suspendSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothAdapter.cancelDiscovery()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothAdapter.disable()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothAdapter.enable()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothAdapter.getAddress()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.getBondedDevices()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.getName()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.getScanMode()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.getState()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.isDiscovering()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.isEnabled()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.setName(java.lang.String)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.setScanMode(int,int)	android.permission.WRITE_SECURE_SETTINGS and android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.setScanMode(int)	android.permission.WRITE_SECURE_SETTINGS and android.permission.BLUETOOTH			
android.bluetooth.BluetoothAdapter.startDiscovery()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.cancelBondProcess()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.cancelPairingUserInput()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.createBond()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothDevice.getBondState()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothDevice.getName()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothDevice.getServiceChannel(android.os.ParcelUuid)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothDevice.getUuids()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothDevice.removeBond()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.setPasskey(int)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothDevice.setPin([B)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothHeadset.connectHeadset(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothHeadset.disconnectHeadset()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothHeadset.getBatteryUsageHint()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothHeadset.getCurrentHeadset()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothHeadset.getPriority(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothHeadset.getState()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothHeadset.isConnected(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothHeadset.startVoiceRecognition()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothHeadset.stopVoiceRecognition()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothPbap.disconnect()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.BluetoothPbap.getClient()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothPbap.getState()	android.permission.BLUETOOTH			
android.bluetooth.BluetoothPbap.isConnected(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.BluetoothSocket.connect()	android.permission.BLUETOOTH			
android.bluetooth.HeadsetBase.acquireWakeLock()	android.permission.WAKE_LOCK			
android.bluetooth.HeadsetBase.finalize()	android.permission.WAKE_LOCK			
android.bluetooth.HeadsetBase.handleInput(java.lang.String)	android.permission.WAKE_LOCK			
android.bluetooth.HeadsetBase.releaseWakeLock()	android.permission.WAKE_LOCK			
android.bluetooth.IBluetooth$Stub$Proxy.addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.cancelDiscovery()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.createBond(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.disable(boolean)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.enable()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getAddress()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getBluetoothState()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getBondState(java.lang.String)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getDiscoverableTimeout()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getName()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteClass(java.lang.String)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteName(java.lang.String)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteUuids(java.lang.String)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getScanMode()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.getTrustState(java.lang.String)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.isDiscovering()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.isEnabled()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.listBonds()	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.removeBond(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.removeServiceRecord(int)	android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(int)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.setName(java.lang.String)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.setPairingConfirmation(java.lang.String,boolean)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.setPasskey(java.lang.String,int)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.setPin(java.lang.String,[B)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.setScanMode(int,int)	android.permission.WRITE_SECURE_SETTINGS and android.permission.BLUETOOTH			
android.bluetooth.IBluetooth$Stub$Proxy.setTrust(java.lang.String,boolean)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetooth$Stub$Proxy.startDiscovery()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectedSinks()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getNonDisconnectedSinks()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getSinkPriority(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getSinkState(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH and android.permission.MODIFY_AUDIO_SETTINGS			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.setSinkPriority(android.bluetooth.BluetoothDevice,int)	android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS			
android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH AND android.permission.MODIFY_AUDIO_SETTINGS			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadset(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadset()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getBatteryUsageHint()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getCurrentHeadset()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getPriority(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getState()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.isConnected(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(android.bluetooth.BluetoothDevice,int)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopVoiceRecognition()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothPbap$Stub$Proxy.connect(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetoothPbap$Stub$Proxy.disconnect()	android.permission.BLUETOOTH_ADMIN			
android.bluetooth.IBluetoothPbap$Stub$Proxy.getClient()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothPbap$Stub$Proxy.getState()	android.permission.BLUETOOTH			
android.bluetooth.IBluetoothPbap$Stub$Proxy.isConnected(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.bluetooth.ScoSocket.acquireWakeLock()	android.permission.WAKE_LOCK			
android.bluetooth.ScoSocket.close()	android.permission.WAKE_LOCK			
android.bluetooth.ScoSocket.finalize()	android.permission.WAKE_LOCK			
android.bluetooth.ScoSocket.releaseWakeLock()	android.permission.WAKE_LOCK			
android.bluetooth.ScoSocket.releaseWakeLockNow()	android.permission.WAKE_LOCK			
android.content.ContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentResolver.getCurrentSync()	android.permission.READ_SYNC_STATS			
android.content.ContentResolver.getIsSyncable(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.ContentResolver.getMasterSyncAutomatically()	android.permission.READ_SYNC_SETTINGS			
android.content.ContentResolver.getPeriodicSyncs(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.ContentResolver.getSyncAutomatically(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.ContentResolver.getSyncStatus(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.ContentResolver.isSyncActive(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.ContentResolver.isSyncPending(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.ContentResolver.openFileDescriptor(android.net.Uri,java.lang.String)	android.permission.READ_CONTACTS			
android.content.ContentResolver.openInputStream(android.net.Uri)	android.permission.READ_CONTACTS			
android.content.ContentResolver.openOutputStream(android.net.Uri)	android.permission.READ_CONTACTS			
android.content.ContentResolver.query(android.net.Uri,[Ljava.lang.String;,java.lang.String,[Ljava.lang.String;,java.lang.String)	android.permission.READ_CONTACTS			
android.content.ContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,int)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentResolver.setMasterSyncAutomatically(boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentService.<init>(android.content.Context,boolean)	android.permission.GET_ACCOUNTS			
android.content.ContentService.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentService.dump(java.io.FileDescriptor,java.io.PrintWriter,[Ljava.lang.String;)	android.permission.DUMP			
android.content.ContentService.getCurrentSync()	android.permission.READ_SYNC_STATS			
android.content.ContentService.getIsSyncable(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.ContentService.getMasterSyncAutomatically()	android.permission.READ_SYNC_SETTINGS			
android.content.ContentService.getPeriodicSyncs(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.ContentService.getSyncAutomatically(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.ContentService.getSyncStatus(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.ContentService.isSyncActive(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.ContentService.isSyncPending(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.ContentService.main(android.content.Context,boolean)	android.permission.GET_ACCOUNTS			
android.content.ContentService.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentService.setIsSyncable(android.accounts.Account,java.lang.String,int)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentService.setMasterSyncAutomatically(boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.content.ContentService.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.content.Context.clearWallpaper()	android.permission.SET_WALLPAPER			
android.content.Context.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	There will be another permission check, depending on the Intent; see the Intent permissions section.		
android.content.Context.sendBroadcast(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.Context.sendOrderedBroadcast(android.content.Intent,java.lang.String)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.Context.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	There will be another permission check, depending on the Intent; see the Intent permissions section.		
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.content.Context.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.content.Context.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.content.Context.startActivity(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.Context.startService(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.ContextWrapper.clearWallpaper()	android.permission.SET_WALLPAPER			
android.content.ContextWrapper.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.content.ContextWrapper.sendBroadcast(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.ContextWrapper.sendOrderedBroadcast(android.content.Intent,java.lang.String)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.ContextWrapper.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.content.ContextWrapper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.content.ContextWrapper.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.content.ContextWrapper.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.content.ContextWrapper.startActivity(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.ContextWrapper.startService(android.content.Intent)		The permission check depends on the Intent; see the Intent permissions section.		
android.content.IContentService$Stub$Proxy.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)	android.permission.WRITE_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.getCurrentSync()	android.permission.READ_SYNC_STATS			
android.content.IContentService$Stub$Proxy.getIsSyncable(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.getMasterSyncAutomatically()	android.permission.READ_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.getPeriodicSyncs(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.getSyncAutomatically(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.getSyncStatus(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.IContentService$Stub$Proxy.isSyncActive(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.IContentService$Stub$Proxy.isSyncPending(android.accounts.Account,java.lang.String)	android.permission.READ_SYNC_STATS			
android.content.IContentService$Stub$Proxy.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)	android.permission.WRITE_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.setIsSyncable(android.accounts.Account,java.lang.String,int)	android.permission.WRITE_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.setMasterSyncAutomatically(boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.content.IContentService$Stub$Proxy.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)	android.permission.WRITE_SYNC_SETTINGS			
android.content.MutableContextWrapper.clearWallpaper()	android.permission.SET_WALLPAPER			
android.content.MutableContextWrapper.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.content.MutableContextWrapper.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.content.MutableContextWrapper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.content.MutableContextWrapper.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.content.MutableContextWrapper.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.content.pm.IPackageManager$Stub$Proxy.addPreferredActivity(android.content.IntentFilter,int,[Landroid.content.ComponentName;,android.content.ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.content.pm.IPackageManager$Stub$Proxy.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.content.pm.IPackageManager$Stub$Proxy.clearPackagePreferredActivities(java.lang.String)	android.permission.SET_PREFERRED_APPLICATIONS			
android.content.pm.IPackageManager$Stub$Proxy.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.DELETE_CACHE_FILES			
android.content.pm.IPackageManager$Stub$Proxy.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)	android.permission.DELETE_PACKAGES			
android.content.pm.IPackageManager$Stub$Proxy.freeStorage(long,android.content.IntentSender)	android.permission.CLEAR_APP_CACHE			
android.content.pm.IPackageManager$Stub$Proxy.freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_CACHE			
android.content.pm.IPackageManager$Stub$Proxy.installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)	android.permission.INSTALL_PACKAGES			
android.content.pm.IPackageManager$Stub$Proxy.movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)	android.permission.MOVE_PACKAGE			
android.content.pm.IPackageManager$Stub$Proxy.replacePreferredActivity(android.content.IntentFilter,int,[Landroid.content.ComponentName;,android.content.ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.content.pm.IPackageManager$Stub$Proxy.setApplicationEnabledSetting(java.lang.String,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.content.pm.IPackageManager$Stub$Proxy.setComponentEnabledSetting(android.content.ComponentName,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.content.pm.IPackageManager$Stub$Proxy.setInstallLocation(int)	android.permission.WRITE_SECURE_SETTINGS			
android.content.pm.IPackageManager$Stub$Proxy.updateExternalMediaStatus(boolean,boolean)		Only the system process can invoke this method.  Enforced using the process's UID rather than a permission.		
android.content.pm.PackageManager.addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.content.pm.PackageManager.clearApplicationUserData(java.lang.String,IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.content.pm.PackageManager.clearPackagePreferredActivities(java.lang.String)	android.permission.SET_PREFERRED_APPLICATIONS			
android.content.pm.PackageManager.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.DELETE_CACHE_FILES			
android.content.pm.PackageManager.deletePackage(java.lang.String,IPackageDeleteObserver,int)	android.permission.DELETE_PACKAGES			
android.content.pm.PackageManager.freeStorage(long,android.content.IntentSender)	android.permission.CLEAR_APP_CACHE			
android.content.pm.PackageManager.freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_CACHE			
android.content.pm.PackageManager.getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)	android.permission.GET_PACKAGE_SIZE			
android.content.pm.PackageManager.installPackage(Uri,IPackageInstallObserver,int,java.lang.String)	android.permission.INSTALL_PACKAGES			
android.content.pm.PackageManager.movePackage(java.lang.String,IPackageMoveObserver,int)	android.permission.MOVE_PACKAGE			
android.content.pm.PackageManager.replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.app.ContextImpl$ApplicationPackageManager.addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.app.ContextImpl$ApplicationPackageManager.clearApplicationUserData(java.lang.String,IPackageDataObserver)	android.permission.CLEAR_APP_USER_DATA			
android.app.ContextImpl$ApplicationPackageManager.clearPackagePreferredActivities(java.lang.String)	android.permission.SET_PREFERRED_APPLICATIONS			
android.app.ContextImpl$ApplicationPackageManager.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)	android.permission.DELETE_CACHE_FILES			
android.app.ContextImpl$ApplicationPackageManager.deletePackage(java.lang.String,IPackageDeleteObserver,int)	android.permission.DELETE_PACKAGES			
android.app.ContextImpl$ApplicationPackageManager.freeStorage(long,android.content.IntentSender)	android.permission.CLEAR_APP_CACHE			
android.app.ContextImpl$ApplicationPackageManager.freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)	android.permission.CLEAR_APP_CACHE			
android.app.ContextImpl$ApplicationPackageManager.getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)	android.permission.GET_PACKAGE_SIZE			
android.app.ContextImpl$ApplicationPackageManager.installPackage(Uri,IPackageInstallObserver,int,java.lang.String)	android.permission.INSTALL_PACKAGES			
android.app.ContextImpl$ApplicationPackageManager.movePackage(java.lang.String,IPackageMoveObserver,int)	android.permission.MOVE_PACKAGE			
android.app.ContextImpl$ApplicationPackageManager.replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)	android.permission.SET_PREFERRED_APPLICATIONS			
android.app.ContextImpl$ApplicationPackageManager.setApplicationEnabledSetting(java.lang.String,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.app.ContextImpl$ApplicationPackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)	android.permission.CHANGE_COMPONENT_ENABLED_STATE			
android.hardware.Camera.native_setup(java.lang.Object)	android.permission.CAMERA			
android.hardware.Camera.open()	android.permission.CAMERA			
android.inputmethodservice.AbstractInputMethodService.clearWallpaper()	android.permission.SET_WALLPAPER			
android.inputmethodservice.AbstractInputMethodService.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.inputmethodservice.AbstractInputMethodService.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.inputmethodservice.AbstractInputMethodService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.inputmethodservice.AbstractInputMethodService.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.inputmethodservice.AbstractInputMethodService.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.location.ILocationManager$Stub$Proxy.addGpsStatusListener(android.location.IGpsStatusListener)	android.permission.ACCESS_FINE_LOCATION			
android.location.ILocationManager$Stub$Proxy.addProximityAlert(double,double,float,long,android.app.PendingIntent)	android.permission.ACCESS_FINE_LOCATION			
android.location.ILocationManager$Stub$Proxy.addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.clearTestProviderEnabled(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.clearTestProviderLocation(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.clearTestProviderStatus(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.getLastKnownLocation(java.lang.String)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.location.ILocationManager$Stub$Proxy.getProviderInfo(java.lang.String)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.location.ILocationManager$Stub$Proxy.getProviders(boolean)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.location.ILocationManager$Stub$Proxy.isProviderEnabled(java.lang.String)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.location.ILocationManager$Stub$Proxy.removeTestProvider(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.reportLocation(android.location.Location,boolean)	android.permission.INSTALL_LOCATION_PROVIDER			
android.location.ILocationManager$Stub$Proxy.requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.location.ILocationManager$Stub$Proxy.requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.location.ILocationManager$Stub$Proxy.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION and android.permission.ACCESS_LOCATION_EXTRA_COMMANDS			
android.location.ILocationManager$Stub$Proxy.setTestProviderEnabled(java.lang.String,boolean)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.setTestProviderLocation(java.lang.String,android.location.Location)	android.permission.ACCESS_MOCK_LOCATION			
android.location.ILocationManager$Stub$Proxy.setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)	android.permission.ACCESS_MOCK_LOCATION			
android.location.LocationManager._requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager._requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)	android.permission.ACCESS_FINE_LOCATION			
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)	android.permission.ACCESS_FINE_LOCATION			
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)	android.permission.ACCESS_FINE_LOCATION			
android.location.LocationManager.addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)	android.permission.ACCESS_MOCK_LOCATION	Test providers must also be enabled in Settings.		
android.location.LocationManager.best(java.util.List)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	This method will only return the providers your permissions give you access to (FINE for GPS; either FINE or COARSE for network).		
android.location.LocationManager.clearTestProviderEnabled(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION	Test providers must also be enabled in Settings.		
android.location.LocationManager.clearTestProviderLocation(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION	Test providers must also be enabled in Settings.		
android.location.LocationManager.clearTestProviderStatus(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION	Test providers must also be enabled in Settings.		
android.location.LocationManager.getBestProvider(android.location.Criteria,boolean)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	This method will only return the providers your permissions give you access to (FINE for GPS; either FINE or COARSE for network).		
android.location.LocationManager.getLastKnownLocation(java.lang.String)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.getProvider(java.lang.String)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.getProviders(android.location.Criteria,boolean)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	This method will only return the providers your permissions give you access to (FINE for GPS; either FINE or COARSE for network).		
android.location.LocationManager.getProviders(boolean)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	This method will only return the providers your permissions give you access to (FINE for GPS; either FINE or COARSE for network).		
android.location.LocationManager.isProviderEnabled(java.lang.String)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.removeTestProvider(java.lang.String)	android.permission.ACCESS_MOCK_LOCATION	Test providers must also be enabled in Settings.		
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION and android.permission.ACCESS_LOCATION_EXTRA_COMMANDS	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.  Then regardless of FINE vs COARSE, you also must supply ACCESS_LOCATION_EXTRA_COMMANDS.		
android.location.LocationManager.setTestProviderEnabled(java.lang.String,boolean)	android.permission.ACCESS_MOCK_LOCATION			
android.location.LocationManager.setTestProviderLocation(java.lang.String,android.location.Location)	android.permission.ACCESS_MOCK_LOCATION			
android.location.LocationManager.setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)	android.permission.ACCESS_MOCK_LOCATION			
android.media.AsyncPlayer.acquireWakeLock()	android.permission.WAKE_LOCK			
android.media.AsyncPlayer.enqueueLocked(android.media.AsyncPlayer$Command)	android.permission.WAKE_LOCK			
android.media.AsyncPlayer.play(android.content.Context,android.net.Uri,boolean,int)	android.permission.WAKE_LOCK			
android.media.AsyncPlayer.releaseWakeLock()	android.permission.WAKE_LOCK			
android.media.AsyncPlayer.stop()	android.permission.WAKE_LOCK			
android.media.AudioManager.isBluetoothA2dpOn()	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.isWiredHeadsetOn()	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.setBluetoothScoOn(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.setMicrophoneMute(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.setMode(int)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.setParameter(java.lang.String,java.lang.String)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.setParameters(java.lang.String)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.setSpeakerphoneOn(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.startBluetoothSco()	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioManager.stopBluetoothSco()	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioRecord.<init>(int,int,int,int,int)	android.permission.RECORD_AUDIO			
android.media.AudioService.setBluetoothScoOn(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioService.setMode(int,android.os.IBinder)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioService.setSpeakerphoneOn(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioService.startBluetoothSco(android.os.IBinder)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.AudioService.stopBluetoothSco(android.os.IBinder)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.IAudioService$Stub$Proxy.setBluetoothScoOn(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.IAudioService$Stub$Proxy.setMode(int,android.os.IBinder)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.IAudioService$Stub$Proxy.setSpeakerphoneOn(boolean)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.IAudioService$Stub$Proxy.startBluetoothSco(android.os.IBinder)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.IAudioService$Stub$Proxy.stopBluetoothSco(android.os.IBinder)	android.permission.MODIFY_AUDIO_SETTINGS			
android.media.MediaPlayer.start()	android.permission.WAKE_LOCK or NONE	WAKE_LOCK is required if MediaPlayer.setWakeMode has been called first.		
android.media.MediaPlayer.stayAwake(boolean)	android.permission.WAKE_LOCK or NONE	WAKE_LOCK is required if MediaPlayer.setWakeMode has been called first.		
android.media.MediaPlayer.stop()	android.permission.WAKE_LOCK or NONE	WAKE_LOCK is required if MediaPlayer.setWakeMode has been called first.		
android.media.MediaRecorder.setAudioSource(int)	android.permission.RECORD_AUDIO			
android.media.MediaRecorder.setVideoSource(int)	android.permission.CAMERA			
android.media.RingtoneManager.setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)	android.permission.WRITE_SETTINGS	BACKUP is also checked the first time a file is supplied to be a ringtone. However, no exception is thrown without it, and it still gets set as the new ringtone.		
android.net.ConnectivityManager.getActiveNetworkInfo()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getAllNetworkInfo()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getLastTetherError(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getMobileDataEnabled()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getNetworkInfo(int)	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getNetworkPreference()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getTetherableIfaces()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getTetherableUsbRegexs()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getTetherableWifiRegexs()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getTetheredIfaces()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.getTetheringErroredIfaces()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.isTetheringSupported()	android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.requestRouteToHost(int,int)	android.permission.CHANGE_NETWORK_STATE			
android.net.ConnectivityManager.setBackgroundDataSetting(boolean)	android.permission.CHANGE_BACKGROUND_DATA_SETTING			
android.net.ConnectivityManager.setMobileDataEnabled(boolean)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE and android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS and android.permission.BACKUP			
android.net.ConnectivityManager.setNetworkPreference(int)	android.permission.CHANGE_NETWORK_STATE and android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS and android.permission.BACKUP			
android.net.ConnectivityManager.setRadio(int,boolean)	android.permission.CHANGE_NETWORK_STATE and android.permission.CHANGE_WIFI_STATE			
android.net.ConnectivityManager.setRadios(boolean)	android.permission.CHANGE_NETWORK_STATE and android.permission.CHANGE_WIFI_STATE			
android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.stopUsingNetworkFeature(int,java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.net.ConnectivityManager.tether(java.lang.String)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE			
android.net.ConnectivityManager.untether(java.lang.String)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE			
android.net.Downloads$ById.deleteDownload(android.content.Context,long)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ById.getMimeTypeForId(android.content.Context,long)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ById.getStatus(android.content.Context,long)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ById.openDownload(android.content.Context,long,java.lang.String)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ById.openDownloadStream(android.content.Context,long)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ById.startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ByUri.getCurrentOtaDownloads(android.content.Context,java.lang.String)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ByUri.getProgressCursor(android.content.Context,long)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ByUri.getStatus(android.content.Context,java.lang.String,long)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ByUri.removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$ByUri.startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.Downloads$DownloadBase.startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	android.permission.ACCESS_DOWNLOAD_MANAGER			
android.net.http.RequestQueue.enablePlatformNotifications()	android.permission.ACCESS_NETWORK_STATE			
android.net.http.RequestQueue.setProxyConfig()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfo()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getAllNetworkInfo()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getLastTetherError(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getMobileDataEnabled()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getNetworkInfo(int)	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getNetworkPreference()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getTetherableIfaces()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getTetherableUsbRegexs()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getTetherableWifiRegexs()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getTetheredIfaces()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.getTetheringErroredIfaces()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.isTetheringSupported()	android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.requestRouteToHost(int,int)	android.permission.CHANGE_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.setBackgroundDataSetting(boolean)	android.permission.CHANGE_BACKGROUND_DATA_SETTING			
android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(boolean)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE and android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS and android.permission.BACKUP			
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(int)	android.permission.CHANGE_NETWORK_STATE and android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS and android.permission.BACKUP			
android.net.IConnectivityManager$Stub$Proxy.setRadio(int,boolean)	android.permission.CHANGE_NETWORK_STATE and android.permission.CHANGE_WIFI_STATE			
android.net.IConnectivityManager$Stub$Proxy.setRadios(boolean)	android.permission.CHANGE_NETWORK_STATE and android.permission.CHANGE_WIFI_STATE			
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)	android.permission.ACCESS_NETWORK_STATE AND android.permission.CHANGE_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(int,java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.tether(java.lang.String)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE			
android.net.IConnectivityManager$Stub$Proxy.untether(java.lang.String)	android.permission.CHANGE_NETWORK_STATE and android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getByteCount(java.lang.String,int,int,int)	android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getCliffLevel(java.lang.String,int)	android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getCliffThreshold(java.lang.String,int)	android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getHelpUri()	android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getPeriodStartTime(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getResetTime(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.IThrottleManager$Stub$Proxy.getThrottle(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.MobileDataStateTracker.reconnect()	android.permission.MODIFY_PHONE_STATE			
android.net.MobileDataStateTracker.setRadio(boolean)	android.permission.MODIFY_PHONE_STATE			
android.net.MobileDataStateTracker.teardown()	android.permission.MODIFY_PHONE_STATE			
android.net.NetworkInfo.isConnectedOrConnecting()	android.permission.ACCESS_NETWORK_STATE			
android.net.ThrottleManager.getByteCount(java.lang.String,int,int,int)	android.permission.ACCESS_NETWORK_STATE			
android.net.ThrottleManager.getCliffLevel(java.lang.String,int)	android.permission.ACCESS_NETWORK_STATE			
android.net.ThrottleManager.getCliffThreshold(java.lang.String,int)	android.permission.ACCESS_NETWORK_STATE			
android.net.ThrottleManager.getHelpUri()	android.permission.ACCESS_NETWORK_STATE			
android.net.ThrottleManager.getPeriodStartTime(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.ThrottleManager.getResetTime(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.acquireMulticastLock(android.os.IBinder,java.lang.String)	android.permission.CHANGE_WIFI_MULTICAST_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.acquireWifiLock(android.os.IBinder,int,java.lang.String)	android.permission.WAKE_LOCK			
android.net.wifi.IWifiManager$Stub$Proxy.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.disableNetwork(int)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.disconnect()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.enableNetwork(int,boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getConfiguredNetworks()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getConnectionInfo()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getDhcpInfo()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getNumAllowedChannels()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getScanResults()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getValidChannelCounts()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getWifiApEnabledState()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.getWifiEnabledState()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.initializeMulticastFiltering()	android.permission.CHANGE_WIFI_MULTICAST_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.isMulticastEnabled()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.pingSupplicant()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.reassociate()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.reconnect()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.releaseMulticastLock()	android.permission.CHANGE_WIFI_MULTICAST_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.releaseWifiLock(android.os.IBinder)	android.permission.WAKE_LOCK			
android.net.wifi.IWifiManager$Stub$Proxy.removeNetwork(int)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.saveConfiguration()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.setNumAllowedChannels(int,boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.setWifiEnabled(boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.IWifiManager$Stub$Proxy.startScan(boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.addNetwork(android.net.wifi.WifiConfiguration)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.disableNetwork(int)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.disconnect()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.enableNetwork(int,boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.getConfiguredNetworks()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getConnectionInfo()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getDhcpInfo()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getNumAllowedChannels()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getScanResults()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getValidChannelCounts()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getWifiApState()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.getWifiState()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.initializeMulticastFiltering()	android.permission.CHANGE_WIFI_MULTICAST_STATE			
android.net.wifi.WifiManager.isMulticastEnabled()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.isWifiApEnabled()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.isWifiEnabled()	android.permission.ACCESS_WIFI_STATE			
android.net.wifi.WifiManager.pingSupplicant()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.reassociate()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.reconnect()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.removeNetwork(int)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.saveConfiguration()	android.permission.CHANGE_WIFI_STATE and android.permission.BACKUP			
android.net.wifi.WifiManager.setNumAllowedChannels(int,boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.setWifiEnabled(boolean)	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.startScan()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager.startScanActive()	android.permission.CHANGE_WIFI_STATE			
android.net.wifi.WifiManager$MulticastLock.acquire()	android.permission.CHANGE_WIFI_MULTICAST_STATE			
android.net.wifi.WifiManager$MulticastLock.finalize()	android.permission.CHANGE_WIFI_MULTICAST_STATE or NONE			
android.net.wifi.WifiManager$MulticastLock.release()	android.permission.CHANGE_WIFI_MULTICAST_STATE			
android.net.wifi.WifiManager$WifiLock.acquire()	android.permission.WAKE_LOCK			
android.net.wifi.WifiManager$WifiLock.finalize()	android.permission.WAKE_LOCK or NONE			
android.net.wifi.WifiManager$WifiLock.release()	android.permission.WAKE_LOCK			
android.os.DropBoxManager.getNextEntry(java.lang.String,long)	android.permission.READ_LOGS			
android.os.IHardwareService$Stub$Proxy.setFlashlightEnabled(boolean)	android.permission.FLASHLIGHT OR android.permission.HARDWARE_TEST			
android.os.IMountService$Stub$Proxy.formatMedia	android.permission.MOUNT_FORMAT_FILESYSTEMS	Android 2.1 and lower		
android.os.IMountService$Stub$Proxy.mountMedia	android.permission.MOUNT_UNMOUNT_FILESYSTEMS	Android 2.1 and lower		
android.os.IMountService$Stub$Proxy.setAutoStartUms	android.permission.WRITE_SETTINGS	Android 2.1 and lower		
android.os.IMountService$Stub$Proxy.setPlayNotificationSounds	android.permission.WRITE_SETTINGS	Android 2.1 and lower		
android.os.IMountService$Stub$Proxy.shutdown	android.permission.SHUTDOWN	Android 2.1 and lower		
android.os.IMountService$Stub$Proxy.unmountMedia	android.permission.MOUNT_UNMOUNT_FILESYSTEMS	Android 2.1 and lower		
android.os.INetworkManagementService$Stub$Proxy.attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	android.permission.CHANGE_NETWORK_STATE
android.os.INetworkManagementService$Stub$Proxy.detachPppd(java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.disableNat(java.lang.String,java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.enableNat(java.lang.String,java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.getDnsForwarders()	android.permission.ACCESS_NETWORK_STATE
android.os.INetworkManagementService$Stub$Proxy.getInterfaceRxCounter(java.lang.String)	android.permission.ACCESS_NETWORK_STATE
android.os.INetworkManagementService$Stub$Proxy.getInterfaceRxThrottle(java.lang.String)	android.permission.ACCESS_NETWORK_STATE
android.os.INetworkManagementService$Stub$Proxy.getInterfaceTxCounter(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.getInterfaceTxThrottle(java.lang.String)	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.getIpForwardingEnabled()	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.isTetheringStarted()	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.isUsbRNDISStarted()	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.listInterfaces()	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.listTetheredInterfaces()	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.listTtys()	android.permission.ACCESS_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)	android.permission.CHANGE_NETWORK_STATE
android.os.INetworkManagementService$Stub$Proxy.setInterfaceThrottle(java.lang.String,int,int)	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.setIpForwardingEnabled(boolean)	android.permission.CHANGE_NETWORK_STATE
android.os.INetworkManagementService$Stub$Proxy.shutdown()	android.permission.SHUTDOWN			
android.os.INetworkManagementService$Stub$Proxy.startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)	android.permission.CHANGE_NETWORK_STATE AND android.permission.CHANGE_WIFI_STATE
android.os.INetworkManagementService$Stub$Proxy.startUsbRNDIS()	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.stopAccessPoint()	android.permission.CHANGE_NETWORK_STATE AND android.permission.CHANGE_WIFI_STATE
android.os.INetworkManagementService$Stub$Proxy.stopTethering()	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.stopUsbRNDIS()	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.tetherInterface(java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.unregisterObserver(android.net.INetworkManagementEventObserver)	android.permission.CHANGE_NETWORK_STATE			
android.os.INetworkManagementService$Stub$Proxy.untetherInterface(java.lang.String)	android.permission.CHANGE_NETWORK_STATE			
android.os.IPowerManager$Stub$Proxy.acquireWakeLock(int,android.os.IBinder,java.lang.String)	android.permission.WAKE_LOCK			
android.os.IPowerManager$Stub$Proxy.clearUserActivityTimeout(long,long)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.crash(java.lang.String)	android.permission.REBOOT			
android.os.IPowerManager$Stub$Proxy.goToSleep(long)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.goToSleepWithReason(long,int)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.preventScreenOn(boolean)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.reboot(java.lang.String)	android.permission.REBOOT			
android.os.IPowerManager$Stub$Proxy.releaseWakeLock(android.os.IBinder,int)	android.permission.WAKE_LOCK			
android.os.IPowerManager$Stub$Proxy.setAttentionLight(boolean,int)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.setBacklightBrightness(int)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.setMaximumScreenOffTimeount(int)	android.permission.WRITE_SECURE_SETTINGS			
android.os.IPowerManager$Stub$Proxy.setPokeLock(int,android.os.IBinder,java.lang.String)	android.permission.DEVICE_POWER			
android.os.IPowerManager$Stub$Proxy.setStayOnSetting(int)	android.permission.WRITE_SETTINGS			
android.os.IPowerManager$Stub$Proxy.userActivityWithForce(long,boolean,boolean)	android.permission.DEVICE_POWER			
android.os.IVibratorService$Stub$Proxy.cancelVibrate(android.os.IBinder)	android.permission.VIBRATE			
android.os.IVibratorService$Stub$Proxy.vibrate(long,android.os.IBinder)	android.permission.VIBRATE			
android.os.IVibratorService$Stub$Proxy.vibratePattern([J,int,android.os.IBinder)	android.permission.VIBRATE			
android.os.PowerManager.goToSleep(long)	android.permission.DEVICE_POWER			
android.os.PowerManager.reboot(java.lang.String)	android.permission.REBOOT			
android.os.PowerManager.setBacklightBrightness(int)	android.permission.DEVICE_POWER			
android.os.PowerManager$WakeLock.acquire()	android.permission.WAKE_LOCK			
android.os.PowerManager$WakeLock.acquire(long)	android.permission.WAKE_LOCK			
android.os.PowerManager$WakeLock.release()	android.permission.WAKE_LOCK			
android.os.PowerManager$WakeLock.release(int)	android.permission.WAKE_LOCK			
android.os.RecoverySystem.bootCommand(android.content.Context,java.lang.String)	android.permission.REBOOT			
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)	android.permission.REBOOT			
android.os.RecoverySystem.rebootWipeUserData(android.content.Context)	android.permission.REBOOT			
android.os.storage.IMountService$Stub$Proxy.createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int)	android.permission.ASEC_CREATE			
android.os.storage.IMountService$Stub$Proxy.destroySecureContainer(java.lang.String,boolean)	android.permission.ASEC_DESTROY			
android.os.storage.IMountService$Stub$Proxy.finalizeSecureContainer(java.lang.String)	android.permission.ASEC_CREATE			
android.os.storage.IMountService$Stub$Proxy.formatVolume(java.lang.String)	android.permission.MOUNT_FORMAT_FILESYSTEMS			
android.os.storage.IMountService$Stub$Proxy.getSecureContainerList()	android.permission.ASEC_ACCESS			
android.os.storage.IMountService$Stub$Proxy.getSecureContainerPath(java.lang.String)	android.permission.ASEC_ACCESS			
android.os.storage.IMountService$Stub$Proxy.getStorageUsers(java.lang.String)	android.permission.MOUNT_UNMOUNT_FILESYSTEMS			
android.os.storage.IMountService$Stub$Proxy.isSecureContainerMounted(java.lang.String)	android.permission.ASEC_ACCESS			
android.os.storage.IMountService$Stub$Proxy.mountSecureContainer(java.lang.String,java.lang.String,int)	android.permission.ASEC_MOUNT_UNMOUNT			
android.os.storage.IMountService$Stub$Proxy.mountVolume(java.lang.String)	android.permission.MOUNT_UNMOUNT_FILESYSTEMS			
android.os.storage.IMountService$Stub$Proxy.renameSecureContainer(java.lang.String,java.lang.String)	android.permission.ASEC_RENAME			
android.os.storage.IMountService$Stub$Proxy.setUsbMassStorageEnabled(boolean)	android.permission.MOUNT_UNMOUNT_FILESYSTEMS			
android.os.storage.IMountService$Stub$Proxy.shutdown(android.os.storage.IMountShutdownObserver)	android.permission.SHUTDOWN			
android.os.storage.IMountService$Stub$Proxy.unmountSecureContainer(java.lang.String,boolean)	android.permission.ASEC_MOUNT_UNMOUNT			
android.os.storage.IMountService$Stub$Proxy.unmountVolume(java.lang.String,boolean)	android.permission.MOUNT_UNMOUNT_FILESYSTEMS			
android.os.storage.StorageManager.disableUsbMassStorage()	android.permission.MOUNT_UNMOUNT_FILESYSTEMS			
android.os.storage.StorageManager.enableUsbMassStorage()	android.permission.MOUNT_UNMOUNT_FILESYSTEMS			
android.os.Vibrator.cancel()	android.permission.VIBRATE			
android.os.Vibrator.vibrate([J,int)	android.permission.VIBRATE			
android.os.Vibrator.vibrate(long)	android.permission.VIBRATE			
android.pim.vcard.VCardComposer.createOneEntry()	android.permission.READ_CONTACTS			
android.pim.vcard.VCardComposer.createOneEntry(java.lang.reflect.Method)	android.permission.READ_CONTACTS			
android.pim.vcard.VCardComposer.createOneEntryInternal(java.lang.String,java.lang.reflect.Method)	android.permission.READ_CONTACTS			
android.pim.vcard.VCardComposer.init()	android.permission.READ_CONTACTS			
android.pim.vcard.VCardComposer.init(java.lang.String,[Ljava.lang.String;)	android.permission.READ_CONTACTS			
android.pim.vcard.VCardComposer$HandlerForOutputStream.onInit(android.content.Context)	android.permission.READ_CONTACTS			
android.pim.vcard.VCardComposer$OneEntryHandler.onInit(android.content.Context)	android.permission.READ_CONTACTS			
android.pim.vcard.VCardEntry.pushIntoContentResolver(android.content.ContentResolver)	android.permission.WRITE_CONTACTS			
android.pim.vcard.VCardEntryCommitter.onEntryCreated(android.pim.vcard.VCardEntry)	android.permission.WRITE_CONTACTS			
android.pim.vcard.VCardEntryHandler.onEntryCreated(android.pim.vcard.VCardEntry)	android.permission.WRITE_CONTACTS			
android.provider.Browser.addSearchUrl(android.content.ContentResolver,java.lang.String)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.canClearHistory(android.content.ContentResolver)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.provider.Browser.clearHistory(android.content.ContentResolver)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.clearSearches(android.content.ContentResolver)	com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.deleteFromHistory(android.content.ContentResolver,java.lang.String)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.deleteHistoryTimeFrame(android.content.ContentResolver,long,long)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.deleteHistoryWhere(android.content.ContentResolver,java.lang.String)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.getAllBookmarks(android.content.ContentResolver)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.provider.Browser.getAllVisitedUrls(android.content.ContentResolver)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.provider.Browser.getVisitedHistory(android.content.ContentResolver)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.provider.Browser.getVisitedLike(android.content.ContentResolver,java.lang.String)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.provider.Browser.requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.provider.Browser.truncateHistory(android.content.ContentResolver)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Browser.updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)	com.android.browser.permission.READ_HISTORY_BOOKMARKS and com.android.browser.permission.WRITE_HISTORY_BOOKMARKS			
android.provider.Calendar$CalendarAlerts.alarmExists(android.content.ContentResolver,long,long,long)	android.permission.READ_CALENDAR			
android.provider.Calendar$CalendarAlerts.findNextAlarmTime(android.content.ContentResolver,long)	android.permission.READ_CALENDAR			
android.provider.Calendar$CalendarAlerts.insert(android.content.ContentResolver,long,long,long,long,int)	android.permission.WRITE_CALENDAR			
android.provider.Calendar$CalendarAlerts.query(android.content.ContentResolver,[Ljava.lang.String;,java.lang.String,[Ljava.lang.String;,java.lang.String)	android.permission.READ_CALENDAR			
android.provider.Calendar$Calendars.delete(android.content.ContentResolver,java.lang.String,[Ljava.lang.String;)	android.permission.WRITE_CALENDAR			
android.provider.Calendar$Calendars.deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)	android.permission.WRITE_CALENDAR			
android.provider.Calendar$Calendars.query(android.content.ContentResolver,[Ljava.lang.String;,java.lang.String,java.lang.String)	android.permission.READ_CALENDAR			
android.provider.Calendar$EventDays.query(android.content.ContentResolver,int,int)	android.permission.READ_CALENDAR			
android.provider.Calendar$Events.query(android.content.ContentResolver,[Ljava.lang.String;,java.lang.String,java.lang.String)	android.permission.READ_CALENDAR			
android.provider.Calendar$Events.query(android.content.ContentResolver,[Ljava.lang.String;)	android.permission.READ_CALENDAR			
android.provider.Calendar$Instances.query(android.content.ContentResolver,[Ljava.lang.String;,long,long,java.lang.String,java.lang.String)	android.permission.READ_CALENDAR			
android.provider.Calendar$Instances.query(android.content.ContentResolver,[Ljava.lang.String;,long,long)	android.permission.READ_CALENDAR			
android.provider.CallLog$Calls.addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)	android.permission.READ_CONTACTS and android.permission.WRITE_CONTACTS	 		
android.provider.CallLog$Calls.getLastOutgoingCall(android.content.Context)	android.permission.READ_CONTACTS			
android.provider.CallLog$Calls.removeExpiredEntries(android.content.Context)	android.permission.WRITE_CONTACTS			
android.provider.Contacts$People.addToGroup(android.content.ContentResolver,long,java.lang.String)	android.permission.READ_CONTACTS and android.permission.WRITE_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.addToGroup(android.content.ContentResolver,long,long)	android.permission.WRITE_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.addToMyContactsGroup(android.content.ContentResolver,long)	android.permission.READ_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)	android.permission.READ_CONTACTS and android.permission.WRITE_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)	android.permission.READ_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.markAsContacted(android.content.ContentResolver,long)	android.permission.READ_CONTACTS and android.permission.WRITE_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)	android.permission.READ_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.queryGroups(android.content.ContentResolver,long)	android.permission.READ_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.setPhotoData(android.content.ContentResolver,android.net.Uri,[B)	android.permission.READ_CONTACTS and android.permission.WRITE_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$People.tryGetMyContactsGroupId(android.content.ContentResolver)	android.permission.READ_CONTACTS	This class is deprecated in Android 2.2.		
android.provider.Contacts$Settings.getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)	android.permission.READ_CONTACTS			
android.provider.Contacts$Settings.setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)	android.permission.WRITE_CONTACTS			
android.provider.ContactsContract$Contacts.getLookupUri(android.content.ContentResolver,android.net.Uri)	android.permission.READ_CONTACTS			
android.provider.ContactsContract$Contacts.lookupContact(android.content.ContentResolver,android.net.Uri)	android.permission.READ_CONTACTS			
android.provider.ContactsContract$Contacts.markAsContacted(android.content.ContentResolver,long)	android.permission.WRITE_CONTACTS			
android.provider.ContactsContract$Contacts.openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)	android.permission.READ_CONTACTS			
android.provider.ContactsContract$Data.getContactLookupUri(android.content.ContentResolver,android.net.Uri)	android.permission.READ_CONTACTS			
android.provider.ContactsContract$RawContacts.getContactLookupUri(android.content.ContentResolver,android.net.Uri)	android.permission.READ_CONTACTS			
android.provider.DrmStore.enforceAccessDrmPermission(android.content.Context)	android.permission.ACCESS_DRM			
android.provider.Settings$Bookmarks.add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$Bookmarks.getIntentForShortcut(android.content.ContentResolver,char)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$Secure.putFloat(android.content.ContentResolver,java.lang.String,float)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS			
android.provider.Settings$Secure.putInt(android.content.ContentResolver,java.lang.String,int)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$Secure.putLong(android.content.ContentResolver,java.lang.String,long)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$Secure.setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)	android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$System.putConfiguration(android.content.ContentResolver,android.content.res.Configuration)	android.permission.WRITE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$System.putFloat(android.content.ContentResolver,java.lang.String,float)	android.permission.WRITE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$System.putInt(android.content.ContentResolver,java.lang.String,int)	android.permission.WRITE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$System.putLong(android.content.ContentResolver,java.lang.String,long)	android.permission.WRITE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$System.putString(android.content.ContentResolver,java.lang.String,java.lang.String)	android.permission.WRITE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Settings$System.setShowGTalkServiceStatus(android.content.ContentResolver,boolean)	android.permission.WRITE_SETTINGS	Checks the BACKUP permission but appears to complete fine without it.		
android.provider.Telephony$Mms.query(android.content.ContentResolver,[Ljava.lang.String;,java.lang.String,java.lang.String)	android.permission.READ_SMS			
android.provider.Telephony$Mms.query(android.content.ContentResolver,[Ljava.lang.String;)	android.permission.READ_SMS			
android.provider.Telephony$Sms.addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long)	android.permission.WRITE_SMS AND android.permission.READ_SMS			
android.provider.Telephony$Sms.addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean)	android.permission.WRITE_SMS AND android.permission.READ_SMS			
android.provider.Telephony$Sms.moveMessageToFolder(android.content.Context,android.net.Uri,int,int)	android.permission.WRITE_SMS			
android.provider.Telephony$Sms.query(android.content.ContentResolver,[Ljava.lang.String;,java.lang.String,java.lang.String)	android.permission.READ_SMS			
android.provider.Telephony$Sms.query(android.content.ContentResolver,[Ljava.lang.String;)	android.permission.READ_SMS			
android.provider.Telephony$Sms$Draft.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)	android.permission.READ_SMS AND android.permission.WRITE_SMS			
android.provider.Telephony$Sms$Draft.saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String)	android.permission.WRITE_SMS	Additional permissions might be needed, based on the URI passed into it.		
android.provider.Telephony$Sms$Inbox.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)	android.permission.READ_SMS AND android.permission.WRITE_SMS			
android.provider.Telephony$Sms$Outbox.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)	android.permission.WRITE_SMS			
android.provider.Telephony$Sms$Sent.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)	android.permission.READ_SMS AND android.permission.WRITE_SMS			
android.provider.Telephony$Threads.getOrCreateThreadId(android.content.Context,java.lang.String)	android.permission.READ_SMS			
android.provider.Telephony$Threads.getOrCreateThreadId(android.content.Context,java.util.Set)	android.permission.READ_SMS			
android.provider.UserDictionary$Words.addWord(android.content.Context,java.lang.String,int,int)	android.permission.WRITE_USER_DICTIONARY			
android.server.BluetoothA2dpService.<init>(android.content.Context,android.server.BluetoothService)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.addAudioSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.checkSinkSuspendState(int)	android.permission.MODIFY_AUDIO_SETTINGS			
android.server.BluetoothA2dpService.connectSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH	You only need android.permission.BLUETOOTH if an existing device is not available as an audio sink.		
android.server.BluetoothA2dpService.disconnectSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.getConnectedSinks()	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.getNonDisconnectedSinks()	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.getSinkPriority(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.getSinkState(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.handleSinkStateChange(android.bluetooth.BluetoothDevice)	android.permission.MODIFY_AUDIO_SETTINGS and android.permission.BLUETOOTH and android.permission.BLUETOOTH_ADMIN and android.permission.WRITE_SETTINGS			
android.server.BluetoothA2dpService.isSinkDevice(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.lookupSinksMatchingStates(int[])	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.onBluetoothDisable()	android.permission.MODIFY_AUDIO_SETTINGS and android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.onBluetoothEnable()	android.permission.MODIFY_AUDIO_SETTINGS			
android.server.BluetoothA2dpService.onConnectSinkResult(java.lang.String,boolean)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.onSinkPropertyChanged(java.lang.String,[Ljava.lang.String;)	android.permission.BLUETOOTH			
android.server.BluetoothA2dpService.resumeSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN and android.permission.BLUETOOTH and android.permission.MODIFY_AUDIO_SETTINGS			
android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)	android.permission.BLUETOOTH_ADMIN and android.permission.WRITE_SETTINGS and android.permission.WRITE_SECURE_SETTINGS			
android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)	android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS
android.server.BluetoothA2dpService.suspendSink(android.bluetooth.BluetoothDevice)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH AND android.permission.MODIFY_AUDIO_SETTINGS			
android.server.BluetoothService.addRemoteDeviceProperties(java.lang.String,[Ljava.lang.String;)	android.permission.BLUETOOTH			
android.server.BluetoothService.addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)	android.permission.BLUETOOTH			
android.server.BluetoothService.cancelBondProcess(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.cancelDiscovery()	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.cancelPairingUserInput(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.createBond(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.disable()	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.disable(boolean)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.enable()	android.permission.BLUETOOTH_ADMIN	This API call triggers the sending of a disallowed broadcast.		
android.server.BluetoothService.enable(boolean)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)	android.permission.BLUETOOTH			
android.server.BluetoothService.getAddress()	android.permission.BLUETOOTH			
android.server.BluetoothService.getAddressFromObjectPath(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getAllProperties()	android.permission.BLUETOOTH			
android.server.BluetoothService.getBluetoothState()	android.permission.BLUETOOTH			
android.server.BluetoothService.getBondState(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getDiscoverableTimeout()	android.permission.BLUETOOTH			
android.server.BluetoothService.getName()	android.permission.BLUETOOTH			
android.server.BluetoothService.getObjectPathFromAddress(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getProperty(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getPropertyInternal(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getRemoteClass(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getRemoteName(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)	android.permission.BLUETOOTH			
android.server.BluetoothService.getRemoteUuids(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.getScanMode()	android.permission.BLUETOOTH			
android.server.BluetoothService.getTrustState(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.isDiscovering()	android.permission.BLUETOOTH			
android.server.BluetoothService.isEnabled()	android.permission.BLUETOOTH			
android.server.BluetoothService.listBonds()	android.permission.BLUETOOTH			
android.server.BluetoothService.persistBluetoothOnSetting(boolean)	android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS			
android.server.BluetoothService.removeBond(java.lang.String)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.removeServiceRecord(int)	android.permission.BLUETOOTH			
android.server.BluetoothService.sendUuidIntent(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.setDiscoverableTimeout(int)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH			
android.server.BluetoothService.setLinkTimeout(java.lang.String,int)	android.permission.BLUETOOTH			
android.server.BluetoothService.setName(java.lang.String)	android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH			
android.server.BluetoothService.setPairingConfirmation(java.lang.String,boolean)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.setPasskey(java.lang.String,int)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.setPin(java.lang.String,[B)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.setPropertyBoolean(java.lang.String,boolean)	android.permission.BLUETOOTH			
android.server.BluetoothService.setPropertyInteger(java.lang.String,int)	android.permission.BLUETOOTH			
android.server.BluetoothService.setPropertyString(java.lang.String,java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.setScanMode(int,int)	android.permission.WRITE_SECURE_SETTINGS and android.permission.BLUETOOTH			
android.server.BluetoothService.setTrust(java.lang.String,boolean)	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.startDiscovery()	android.permission.BLUETOOTH_ADMIN			
android.server.BluetoothService.updateDeviceServiceChannelCache(java.lang.String)	android.permission.BLUETOOTH			
android.server.BluetoothService.updateRemoteDevicePropertiesCache(java.lang.String)	android.permission.BLUETOOTH			
android.server.search.Searchables.buildSearchableList()	android.permission.GLOBAL_SEARCH			
android.server.search.Searchables.findGlobalSearchActivity()	android.permission.GLOBAL_SEARCH			
android.service.urlrenderer.UrlRendererService.clearWallpaper()	android.permission.SET_WALLPAPER			
android.service.urlrenderer.UrlRendererService.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.service.urlrenderer.UrlRendererService.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.service.urlrenderer.UrlRendererService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.service.urlrenderer.UrlRendererService.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.service.urlrenderer.UrlRendererService.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.service.wallpaper.WallpaperService.clearWallpaper()	android.permission.SET_WALLPAPER			
android.service.wallpaper.WallpaperService.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.service.wallpaper.WallpaperService.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.service.wallpaper.WallpaperService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.service.wallpaper.WallpaperService.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.service.wallpaper.WallpaperService.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.speech.RecognitionService.clearWallpaper()	android.permission.SET_WALLPAPER			
android.speech.RecognitionService.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.speech.RecognitionService.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY			
android.speech.RecognitionService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.speech.RecognitionService.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.speech.RecognitionService.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.speech.SpeechRecognizer.cancel()	android.permission.RECORD_AUDIO			
android.speech.SpeechRecognizer.handleCancelMessage()	android.permission.RECORD_AUDIO			
android.speech.SpeechRecognizer.handleStartListening(android.content.Intent)	android.permission.RECORD_AUDIO			
android.speech.SpeechRecognizer.handleStopMessage()	android.permission.RECORD_AUDIO			
android.speech.SpeechRecognizer.startListening(android.content.Intent)	android.permission.RECORD_AUDIO			
android.speech.SpeechRecognizer.stopListening()	android.permission.RECORD_AUDIO			
android.telephony.gsm.SmsManager.copyMessageToSim([B,[B,int)	android.permission.RECEIVE_SMS and android.permission.SEND_SMS			
android.telephony.gsm.SmsManager.deleteMessageFromSim(int)	android.permission.RECEIVE_SMS and android.permission.SEND_SMS			
android.telephony.gsm.SmsManager.getAllMessagesFromSim()	android.permission.RECEIVE_SMS 			
android.telephony.gsm.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent)	android.permission.SEND_SMS			
android.telephony.gsm.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)	android.permission.SEND_SMS			
android.telephony.gsm.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)	android.permission.SEND_SMS			
android.telephony.gsm.SmsManager.updateMessageOnSim(int,int,[B)	android.permission.RECEIVE_SMS and android.permission.SEND_SMS			
android.telephony.PhoneNumberUtils.getNumberFromIntent(android.content.Intent,android.content.Context)	android.permission.CALL_PRIVILEGED or android.permission.READ_CONTACTS or NONE	If the argument is a voicemail:// Uri, then CALL_PRIVILEGED is required. If it's a contacts provider Uri, then READ_CONTACTS is required.  Otherwise, no permission is required.		
android.telephony.PhoneNumberUtils.isVoiceMailNumber(java.lang.String)	android.permission.READ_PHONE_STATE			
android.telephony.SmsManager.copyMessageToIcc([B,[B,int)	android.permission.RECEIVE_SMS and android.permission.SEND_SMS			
android.telephony.SmsManager.deleteMessageFromIcc(int)	android.permission.RECEIVE_SMS and android.permission.SEND_SMS			
android.telephony.SmsManager.getAllMessagesFromIcc()	android.permission.RECEIVE_SMS			
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent)	android.permission.SEND_SMS			
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)	android.permission.SEND_SMS			
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)	android.permission.SEND_SMS			
android.telephony.SmsManager.updateMessageOnIcc(int,int,[B)	android.permission.RECEIVE_SMS and android.permission.SEND_SMS			
android.telephony.TelephonyManager.disableLocationUpdates()	android.permission.CONTROL_LOCATION_UPDATES			
android.telephony.TelephonyManager.enableLocationUpdates()	android.permission.CONTROL_LOCATION_UPDATES			
android.telephony.TelephonyManager.getCellLocation()	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()	android.permission.CALL_PRIVILEGED			
android.telephony.TelephonyManager.getDeviceId()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getDeviceSoftwareVersion()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getLine1AlphaTag()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getLine1Number()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getNeighboringCellInfo()	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
android.telephony.TelephonyManager.getSimSerialNumber()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getSubscriberId()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getVoiceMailAlphaTag()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.getVoiceMailNumber()	android.permission.READ_PHONE_STATE			
android.telephony.TelephonyManager.listen(android.telephony.PhoneStateListener,int)	android.permission.READ_PHONE_STATE or android.permission.ACCESS_COARSE_LOCATION or NONE	The permission check is dependent on the value of the second parameter.  16 requires ACCESS_COARSE_LOCATION; 128, 32, 4, 64, and 8 require READ_PHONE_STATE.  Also, does not accept ACCESS_FINE_LOCATION in place of COARSE for 16.		
android.view.ContextThemeWrapper.clearWallpaper()	android.permission.SET_WALLPAPER			
android.view.ContextThemeWrapper.removeStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.view.ContextThemeWrapper.sendStickyBroadcast(android.content.Intent)	android.permission.BROADCAST_STICKY	The permission check depends on the Intent; see the Intent permissions section.		
android.view.ContextThemeWrapper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)	android.permission.BROADCAST_STICKY			
android.view.ContextThemeWrapper.setWallpaper(android.graphics.Bitmap)	android.permission.SET_WALLPAPER			
android.view.ContextThemeWrapper.setWallpaper(java.io.InputStream)	android.permission.SET_WALLPAPER			
android.view.IWindowManager$Stub$Proxy.addAppToken(int,android.view.IApplicationToken,int,int,boolean)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.addWindowToken(android.os.IBinder,int)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.disableKeyguard(android.os.IBinder,java.lang.String)	android.permission.DISABLE_KEYGUARD			
android.view.IWindowManager$Stub$Proxy.executeAppTransition()	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(android.view.IOnKeyguardExitResult)	android.permission.DISABLE_KEYGUARD			
android.view.IWindowManager$Stub$Proxy.getDPadKeycodeState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getDPadScancodeState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getKeycodeState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getKeycodeStateForDevice(int,int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getScancodeState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getScancodeStateForDevice(int,int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getSwitchState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getSwitchStateForDevice(int,int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getTrackballKeycodeState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.getTrackballScancodeState(int)	android.permission.READ_INPUT_STATE			
android.view.IWindowManager$Stub$Proxy.injectKeyEvent(android.view.KeyEvent,boolean)	android.permission.INJECT_EVENTS			
android.view.IWindowManager$Stub$Proxy.injectPointerEvent(android.view.MotionEvent,boolean)	android.permission.INJECT_EVENTS			
android.view.IWindowManager$Stub$Proxy.injectTrackballEvent(android.view.MotionEvent,boolean)	android.permission.INJECT_EVENTS			
android.view.IWindowManager$Stub$Proxy.isViewServerRunning()	android.permission.DUMP			
android.view.IWindowManager$Stub$Proxy.moveAppToken(int,android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.moveAppTokensToBottom(java.util.List)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.moveAppTokensToTop(java.util.List)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.pauseKeyDispatching(android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.prepareAppTransition(int)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.reenableKeyguard(android.os.IBinder)	android.permission.DISABLE_KEYGUARD			
android.view.IWindowManager$Stub$Proxy.removeAppToken(android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.removeWindowToken(android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.resumeKeyDispatching(android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setAnimationScale(int,float)	android.permission.SET_ANIMATION_SCALE			
android.view.IWindowManager$Stub$Proxy.setAnimationScales([F)	android.permission.SET_ANIMATION_SCALE			
android.view.IWindowManager$Stub$Proxy.setAppGroupId(android.os.IBinder,int)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setAppOrientation(android.view.IApplicationToken,int)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setAppStartingWindow(android.os.IBinder,java.lang.String,int,java.lang.CharSequence,int,int,android.os.IBinder,boolean)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setAppVisibility(android.os.IBinder,boolean)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setAppWillBeHidden(android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setEventDispatching(boolean)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setFocusedApp(android.os.IBinder,boolean)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.setNewConfiguration(android.content.res.Configuration)	android.permission.MANAGE_APP_TOKENS AND android.permission.DEVICE_POWER			
android.view.IWindowManager$Stub$Proxy.setRotation(int,boolean,int)	android.permission.SET_ORIENTATION			
android.view.IWindowManager$Stub$Proxy.startAppFreezingScreen(android.os.IBinder,int)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.startViewServer(int)	android.permission.DUMP			
android.view.IWindowManager$Stub$Proxy.stopAppFreezingScreen(android.os.IBinder,boolean)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowManager$Stub$Proxy.stopViewServer()	android.permission.DUMP			
android.view.IWindowManager$Stub$Proxy.updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)	android.permission.MANAGE_APP_TOKENS			
android.view.IWindowSession$Stub$Proxy.add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)	android.permission.SYSTEM_ALERT_WINDOW or android.permission.INTERNAL_SYSTEM_WINDOW or NONE	This permission check is based on the LayoutParams associated with the window.		
android.view.Surface.closeTransaction()	android.permission.ACCESS_SURFACE_FLINGER			
android.view.Surface.freezeDisplay(int)	android.permission.ACCESS_SURFACE_FLINGER			
android.view.Surface.setOrientation(int,int,int)	android.permission.ACCESS_SURFACE_FLINGER			
android.view.Surface.setOrientation(int,int)	android.permission.ACCESS_SURFACE_FLINGER			
android.view.Surface.unfreezeDisplay(int)	android.permission.ACCESS_SURFACE_FLINGER			
android.view.SurfaceSession.<init>()	android.permission.ACCESS_SURFACE_FLINGER			
android.webkit.GeolocationPermissions$Callback.invoke	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	This permission is not actually checked here.  However, calling this method indicates that the apps wants to support geolocation for the WebView, which is only possible if the app has one of these permissions.		
android.webkit.GeolocationService.registerForLocationUpdates()	android.permission.ACCESS_FINE_LOCATION			
android.webkit.GeolocationService.setEnableGps(boolean)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	ACCESS_FINE_LOCATION for gps; either permission is acceptable for network.		
android.webkit.GeolocationService.start()	android.permission.ACCESS_FINE_LOCATION			
android.webkit.WebChromeClient.onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions.Callback)	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION	This permission is not actually checked here.  However, calling this method indicates that the apps wants to support geolocation for the WebView, which is only possible if the app has one of these permissions.		
android.webkit.WebIconDatabase.bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)	com.android.browser.permission.READ_HISTORY_BOOKMARKS			
android.webkit.WebSettings.setBlockNetworkLoads(boolean)	android.permission.INTERNET			
android.webkit.WebSettings.verifyNetworkAccess()	android.permission.INTERNET			
android.webkit.WebView.<init>(android.content.Context,android.util.AttributeSet,int)	android.permission.INTERNET			
android.webkit.WebView.<init>(android.content.Context,android.util.AttributeSet)	android.permission.INTERNET			
android.webkit.WebView.<init>(android.content.Context)	android.permission.INTERNET			
android.webkit.WebViewCore.<init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map)	android.permission.INTERNET			
android.widget.QuickContactBadge.assignContactFromEmail(java.lang.String,boolean)	android.permission.READ_CONTACTS			
android.widget.QuickContactBadge.assignContactFromPhone(java.lang.String,boolean)	android.permission.READ_CONTACTS			
android.widget.QuickContactBadge.trigger(android.net.Uri)	android.permission.READ_CONTACTS			
com.android.http.multipart.FilePart.sendData(java.io.OutputStream)	android.permission.INTERNET			
com.android.http.multipart.FilePart.sendDispositionHeader(java.io.OutputStream)	android.permission.INTERNET			
com.android.http.multipart.Part.send(java.io.OutputStream)	android.permission.INTERNET			
com.android.http.multipart.Part.sendParts(java.io.OutputStream,com.android.http.multipart.Part[])	android.permission.INTERNET		
com.android.http.multipart.Part.sendParts(java.io.OutputStream,com.android.http.multipart.Part[],byte[])	android.permission.INTERNET			
com.android.http.multipart.Part.sendStart(java.io.OutputStream)	android.permission.INTERNET			
com.android.http.multipart.Part.sendTransferEncodingHeader(java.io.OutputStream)	android.permission.INTERNET			
com.android.http.multipart.StringPart.sendData(java.io.OuputStream)	android.permission.INTERNET			
com.android.internal.app.IBatteryStats$Stub$Proxy.getAwakeTimeBattery()	android.permission.BATTERY_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.getAwakeTimePlugged()	android.permission.BATTERY_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.getStatistics()	android.permission.BATTERY_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteFullWifiLockAcquired(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteFullWifiLockReleased(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteInputEvent()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneDataConnectionState(int,boolean)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneOff()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneOn()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneSignalStrength(SignalStrength)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneState(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScanWifiLockAcquired(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScanWifiLockReleased(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScreenBrightness(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScreenOff()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScreenOn()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStartGps(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStartSensor(int,int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStartWakelock(int,java.lang.String,int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStopGps(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStopSensor(int,int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStopWakelock(int,java.lang.String,int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteUserActivity(int,int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiMulticastDisabled(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiMulticastEnabled(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiOff(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiOn(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiRunning()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiStopped()	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.recordCurrentLevel(int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IBatteryStats$Stub$Proxy.setOnBattery(boolean,int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IUsageStats$Stub$Proxy.getAllPkgUsageStats()	android.permission.PACKAGE_USAGE_STATS			
com.android.internal.app.IUsageStats$Stub$Proxy.getPkgUsageStats(ComponentName)	android.permission.PACKAGE_USAGE_STATS			
com.android.internal.app.IUsageStats$Stub$Proxy.noteLaunchTime(ComponentName, int)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IUsageStats$Stub$Proxy.notePauseComponent(ComponentName)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.app.IUsageStats$Stub$Proxy.noteResumeComponent(ComponentName)	android.permission.UPDATE_DEVICE_STATS			
com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.bindAppWidgetId(int,ComponentName)	android.permission.BIND_APPWIDGET			
com.android.internal.os.IDropBoxManagerService$Stub$Proxy.getNextEntry(java.lang.String,long)	android.permission.READ_LOGS			
com.android.internal.telephony.CallerInfo.getCallerId(android.content.Context,java.lang.String)	android.permission.READ_CONTACTS			
com.android.internal.telephony.CallerInfo.getCallerInfo(android.content.Context,java.lang.String)	android.permission.READ_CONTACTS			
com.android.internal.telephony.CallerInfo.markAsVoiceMail()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IccPhoneBookInterfaceManager$Stub$Proxy.getAdnRecordsInEf(int)	android.permission.READ_CONTACTS			
com.android.internal.telephony.IccPhoneBookInterfaceManager$Stub$Proxy.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,java.lang.String)	android.permission.WRITE_CONTACTS			
com.android.internal.telephony.IccPhoneBookInterfaceManager$Stub$Proxy.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	android.permission.WRITE_CONTACTS			
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsInEf(int)	android.permission.READ_CONTACTS			
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,java.lang.String)	android.permission.WRITE_CONTACTS			
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	android.permission.WRITE_CONTACTS			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceId()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceSvn()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIccSerialNumber()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1AlphaTag()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1Number()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getSubscriberId()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailAlphaTag()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailNumber()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.ISms$Stub$Proxy.copyMessageToIccEf(int,byte[],byte[])	android.permission.RECEIVE_SMS			
com.android.internal.telephony.ISms$Stub$Proxy.getAllMessagesFromIccEf()	android.permission.RECEIVE_SMS			
com.android.internal.telephony.ISms$Stub$Proxy.sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)	android.permission.SEND_SMS			
com.android.internal.telephony.ISms$Stub$Proxy.sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)	android.permission.SEND_SMS			
com.android.internal.telephony.ISms$Stub$Proxy.sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)	android.permission.SEND_SMS			
com.android.internal.telephony.ISms$Stub$Proxy.updateMessageOnIccEf(int,int,byte[])	android.permission.RECEIVE_SMS			
com.android.internal.telephony.ITelephony$Stub$Proxy.answerRingingCall()	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.call(java.lang.String)	android.permission.CALL_PHONE			
com.android.internal.telephony.ITelephony$Stub$Proxy.cancelMissedCallsNotification()	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.disableApnType(java.lang.String)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.disableDataConnectivity()	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.disableLocationUpdates()	android.permission.CONTROL_LOCATION_UPDATES			
com.android.internal.telephony.ITelephony$Stub$Proxy.enableApnType(java.lang.String)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.enableDataConnectivity()	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.enableLocationUpdates()	android.permission.CONTROL_LOCATION_UPDATES			
com.android.internal.telephony.ITelephony$Stub$Proxy.endCall()	android.permission.CALL_PHONE			
com.android.internal.telephony.ITelephony$Stub$Proxy.getCellLocation()	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
com.android.internal.telephony.ITelephony$Stub$Proxy.getNeighboringCellInfo()	android.permission.ACCESS_FINE_LOCATION or android.permission.ACCESS_COARSE_LOCATION			
com.android.internal.telephony.ITelephony$Stub$Proxy.handlePinMmi(java.lang.String)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.isSimPinEnabled()	android.permission.READ_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.setRadio(boolean)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.silenceRinger()	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.supplyPin(java.lang.String)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephony$Stub$Proxy.toggleRadioOnOff()	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)	android.permission.READ_PHONE_STATE or android.permission.ACCESS_COARSE_LOCATION or NONE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCallForwardingChanged(boolean)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCallState(int,java.lang.String)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCellLocation(android.os.Bundle)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataActivity(int)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)	android.permission.MODIFY_PHONE_STATE and android.permission.BROADCAST_STICKY			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnectionFailed(java.lang.String)	android.permission.MODIFY_PHONE_STATE and android.permission.BROADCAST_STICKY			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyMessageWaitingChanged(boolean)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyServiceState(android.telephony.ServiceState)	android.permission.MODIFY_PHONE_STATE			
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifySignalStrength(android.telephony.SignalStrength)	android.permission.MODIFY_PHONE_STATE			
com.android.server.WallpaperManagerService.bindWallpaperComponentLocked(android.content.ComponentName)	android.permission.BIND_WALLPAPER and android.permission.MANAGE_APP_TOKENS
com.android.server.WallpaperManagerService.dump(java.io.FileDescriptor,java.io.PrintWriter,[Ljava.lang.String)	android.permission.DUMP			
com.htc.net.wimax.WimaxController$Stub$Proxy.getConnectionInfo	android.permission.ACCESS_WIMAX_STATE	Specific to HTC devices.		
com.htc.net.wimax.WimaxController$Stub$Proxy.getWimaxState	android.permission.ACCESS_WIMAX_STATE	Specific to HTC devices.		
com.htc.net.wimax.WimaxController$Stub$Proxy.isBackoffState	android.permission.ACCESS_WIMAX_STATE	Specific to HTC devices.		
com.htc.net.wimax.WimaxController$Stub$Proxy.isWimaxEnabled	android.permission.ACCESS_WIMAX_STATE	Specific to HTC devices.		
com.htc.net.wimax.WimaxController$Stub$Proxy.setWimaxEnabled	android.permission.CHANGE_WIMAX_STATE	Specific to HTC devices.		
java.lang.Runtime.exec(java.lang.String)	android.permission.READ_LOGS or android.permission.DUMP or android.permission.INSTALL_PACKAGES or NONE	READ_LOGS for logcat, DUMP for dumpsys or dumpstate, android.permission.INSTALL_PACKAGES for pm install,		
java.lang.Runtime.exec(java.lang.String[])	android.permission.READ_LOGS or android.permission.DUMP or android.permission.INSTALL_PACKAGES or NONE	READ_LOGS for logcat, DUMP for dumpsys or dumpstate, android.permission.INSTALL_PACKAGES for pm install,		
java.lang.Runtime.exec(java.lang.String[],java.lang.String[])	android.permission.READ_LOGS or android.permission.DUMP or android.permission.INSTALL_PACKAGES or NONE	READ_LOGS for logcat, DUMP for dumpsys or dumpstate, android.permission.INSTALL_PACKAGES for pm install,		
java.lang.Runtime.exec(java.lang.String[],java.lang.String[],java.io.File)	android.permission.READ_LOGS or android.permission.DUMP or android.permission.INSTALL_PACKAGES or NONE	READ_LOGS for logcat, DUMP for dumpsys or dumpstate, android.permission.INSTALL_PACKAGES for pm install,		
java.lang.Runtime.exec(java.lang.String,java.lang.String[])	android.permission.READ_LOGS or android.permission.DUMP or android.permission.INSTALL_PACKAGES or NONE	READ_LOGS for logcat, DUMP for dumpsys or dumpstate, android.permission.INSTALL_PACKAGES for pm install,		
java.lang.Runtime.exec(java.lang.String,java.lang.String[],java.io.File)	android.permission.READ_LOGS or android.permission.DUMP or android.permission.INSTALL_PACKAGES or NONE	READ_LOGS for logcat, DUMP for dumpsys or dumpstate, android.permission.INSTALL_PACKAGES for pm install,		
java.net.DatagramSocket.<init>()	android.permission.INTERNET	
java.net.DatagramSocket.<init>(int)	android.permission.INTERNET	
java.net.DatagramSocket.<init>(int,java.net.InetAddress)	android.permission.INTERNET	
java.net.DatagramSocket.<init>(java.net.SocketAddress)	android.permission.INTERNET			
java.net.HttpURLConnection.<init>(java.net.URL)	android.permission.INTERNET			
java.net.HttpURLConnection.connect()	android.permission.INTERNET			
java.net.MulticastSocket.<init>()	android.permission.INTERNET			
java.net.MulticastSocket.<init>(int)	android.permission.INTERNET			
java.net.MulticastSocket.<init>(java.net.SocketAddress)	android.permission.INTERNET			
java.net.NetworkInterface.<init>()	android.permission.INTERNET			
java.net.NetworkInterface.<init>(java.lang.String,int,java.net.InetAddress)	android.permission.INTERNET			
java.net.ServerSocket.<init>()	android.permission.INTERNET			
java.net.ServerSocket.<init>(int)	android.permission.INTERNET			
java.net.ServerSocket.<init>(int,int)	android.permission.INTERNET			
java.net.ServerSocket.<init>(int,int,java.net.InetAddress)	android.permission.INTERNET			
java.net.ServerSocket.bind(java.net.SocketAddress)	android.permission.INTERNET
java.net.ServerSocket.bind(java.net.SocketAddress,int)	android.permission.INTERNET
java.net.Socket.<init>()	android.permission.INTERNET	
java.net.Socket.<init>(java.lang.String,int)	android.permission.INTERNET
java.net.Socket.<init>(java.lang.String,int,java.net.InetAddress,int)	android.permission.INTERNET
java.net.Socket.<init>(java.lang.String,int,boolean)	android.permission.INTERNET
java.net.Socket.<init>(java.net.InetAddress,int)	android.permission.INTERNET
java.net.Socket.<init>(java.net.InetAddress,int,java.net.InetAddress,int)	android.permission.INTERNET
java.net.Socket.<init>(java.net.InetAddress,int,boolean)	android.permission.INTERNET
java.net.URL.getContent(java.lang.Class[])	android.permission.INTERNET
java.net.URL.getContent()	android.permission.INTERNET
java.net.URL.openConnection(java.net.Proxy)	android.permission.INTERNET
java.net.URL.openConnection()	android.permission.INTERNET
java.net.URL.openStream()	android.permission.INTERNET
java.net.URLConnection.connect()	android.permission.INTERNET			
java.net.URLConnection.getInputStream()	android.permission.INTERNET			
org.apache.http.impl.client.DefaultHttpClient.<init>()	android.permission.INTERNET			
org.apache.http.impl.client.DefaultHttpClient.<init>(org.apache.http.params.HttpParams)	android.permission.INTERNET			
org.apache.http.impl.client.DefaultHttpClient.<init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)	android.permission.INTERNET			
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest)	android.permission.INTERNET	
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)	android.permission.INTERNET
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest)	android.permission.INTERNET	
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)	android.permission.INTERNET			